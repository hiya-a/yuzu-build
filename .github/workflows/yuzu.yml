name: 'yuzu'
run-name: 'Build yuzu'

on:
  workflow_dispatch:
    inputs:
      repo_source:
        description: 'the source repository for the build. the default "yuzu-emu/yuzu" builds EA, "yuzu-emu/yuzu-mainline" builds mainline; any other repo fork can be used'
        required: true
        default: 'yuzu-emu/yuzu'
        type: string
      custom_prs:
        description: 'comma separated list of PR IDs'
        required: false
        type: string
      optimization_flag:
        description: 'CPU optimization flag'
        required: true
        default: 'AVX2'
        type: choice
        options:
        - SSE
        - SSE2
        - AVX
        - AVX2
        - AVX512
        - none
      yuzu_use_qt_web_engine:
        description: 'YUZU_USE_QT_WEB_ENGINE cmake flag'
        required: true
        default: false
        type: boolean
      use_discord_presence:
        description: 'USE_DISCORD_PRESENCE cmake flag'
        required: true
        default: false
        type: boolean
      enable_cubeb:
        description: 'ENABLE_CUBEB cmake flag'
        required: true
        default: false
        type: boolean
      enable_libusb:
        description: 'ENABLE_LIBUSB cmake flag'
        required: true
        default: false
        type: boolean
      enable_web_service:
        description: 'ENABLE_WEB_SERVICE cmake flag'
        required: true
        default: false
        type: boolean
      yuzu_room:
        description: 'YUZU_ROOM cmake flag'
        required: true
        default: false
        type: boolean
      shadowFlickerPatch:
        description: 'SHADOWFLICKERPATCH'
        required: true
        default: false
        type: boolean

jobs:
  build-msvc:
    name: 'build (windows, msvc)'

    runs-on: windows-2022
    env:
      ZSTD_CLEVEL: 1
    steps:
      - name: Checkout yuzu-ea
        if: ${{ inputs.repo_source != 'yuzu-emu/yuzu-mainline' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_source }}
          fetch-depth: 0
      - name: Checkout yuzu-mainline
        if: ${{ inputs.repo_source == 'yuzu-emu/yuzu-mainline' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_source }}
      - name: Configure git
        if: ${{ inputs.repo_source != 'yuzu-emu/yuzu-mainline' }}
        run: |
          git config --global user.email "yuzu@yuzu-emu.org"
          git config --global user.name "yuzubot"
          git config --global pull.rebase true
          git config --global rebase.autoStash true
          git config --global fetch.prune true
      - name: Install Vulkan SDK
        run: .\.ci\scripts\windows\install-vulkan-sdk.ps1
      - name: Merge PRs
        if: ${{ inputs.repo_source != 'yuzu-emu/yuzu-mainline' }}
        uses: actions/github-script@v6
        with: 
          script: |
            const myExec = async (command) => await exec.getExecOutput('"C:\\Program Files\\Git\\bin\\bash.exe"',["-c",command],{silent: true}).then(result => result.stdout.trim()).catch(err => {console.log(err) ; return false })
            const prs = await github.rest.search.issuesAndPullRequests({
              q: "type:pr+is:open+repo:yuzu-emu/yuzu+label:early-access-merge,mainline-merge+-label:android,android-merge",
              sort: "updated",
              order: "asc",
              per_page: 100
            }).then(res => res.data.items);

            let commaSeparatedPRs = "${{ inputs.custom_prs }}" || "4042";
            const prQuery = "type:pr+is:open+repo:yuzu-emu/yuzu+" + commaSeparatedPRs.split(',').map((n) => n.trim()).join('+');

            const customPrs = await github.rest.search.issuesAndPullRequests({
              q: prQuery,
              sort: "updated",
              order: "asc",
              per_page: 100
            }).then(res => res.data.items);

            for (const pr of prs.concat(customPrs)) {
              console.log(`Will merge "${pr.title}" ${pr.pull_request.html_url}`);
              let pn = pr.number;
              await myExec(`git fetch "https://github.com/yuzu-emu/yuzu.git" "pull/${pn}/head:pr-${pn}" -f --no-recurse-submodules`);
              await myExec(`git merge --squash "pr-${pn}"`);
              await myExec(`git commit -m "${pr.title} [#${pn}]"`);
            };
            let body = await myExec(`GIT_BRANCH=$(git branch --show-current) && git log origin/$GIT_BRANCH..$GIT_BRANCH --pretty=format:"- %s"`);
            core.exportVariable("body",body);
            core.exportVariable("time",new Date().toISOString().slice(0,16))
      - name: Init submodules
        run: |
          git submodule update --init externals/vcpkg
          git submodule update --init --recursive --depth 1
      - name: Checkout patches
        uses: actions/checkout@v3
        with:
          path: 'patches'
      - name: Apply patches
        run: |
          if ("${{ inputs.optimization_flag }}" -eq "SSE") {
              git apply .\patches\optionalPatches\cmakelists_SSE.patch
          }
          if ("${{ inputs.optimization_flag }}" -eq "SSE2") {
              git apply .\patches\optionalPatches\cmakelists_SSE2.patch
          }
          if ("${{ inputs.optimization_flag }}" -eq "AVX") {
              git apply .\patches\optionalPatches\cmakelists_AVX.patch
          }
          if ("${{ inputs.optimization_flag }}" -eq "AVX2") {
              git apply .\patches\optionalPatches\cmakelists_AVX2.patch
          }
          if ("${{ inputs.optimization_flag }}" -eq "AVX512") {
              git apply .\patches\optionalPatches\cmakelists_AVX512.patch
          }
          if ("${{ inputs.shadowFlickerPatch }}" -eq "true") {
              git apply .\patches\optionalPatches\shadowFlicker.patch
          }

          $patchFiles = Get-ChildItem -Path ".\patches\defaultPatches\*.patch"
          foreach ($file in $patchFiles) {
              git apply "$file"
          }
      - name: Restore cmake cache
        uses: actions/cache/restore@v3
        id: cache-cmake-restore
        with:
          path: build
          key: cmake3-${{ hashFiles('CMakeLists.txt', 'externals/CMakeLists.txt', 'CMakeModules/*.cmake') }}
      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
      - name: Configure
        env:
          CC: cl.exe
          CXX: cl.exe
        run: |
          glslangValidator --version
          mkdir build -ErrorAction SilentlyContinue
          cmake . -B build -GNinja -DCMAKE_POLICY_DEFAULT_CMP0069=NEW -DYUZU_ENABLE_LTO=ON -DYUZU_USE_BUNDLED_QT=1 -DYUZU_USE_BUNDLED_SDL2=1 -DYUZU_USE_QT_WEB_ENGINE="${{inputs.yuzu_use_qt_web_engine}}" -DENABLE_COMPATIBILITY_LIST_DOWNLOAD=ON -DYUZU_ENABLE_COMPATIBILITY_REPORTING=OFF -DYUZU_TESTS=OFF -DUSE_DISCORD_PRESENCE="${{inputs.use_discord_presence}}" -DENABLE_QT_TRANSLATION=ON -DDISPLAY_VERSION="early-access" -DCMAKE_BUILD_TYPE=Release -DENABLE_CUBEB="${{inputs.enable_cubeb}}" -DENABLE_LIBUSB="${{inputs.enable_libusb}}" -DENABLE_WEB_SERVICE="${{inputs.enable_web_service}}" -DYUZU_ROOM="${{inputs.yuzu_room}}"
      - name: Save cmake cache
        uses: actions/cache/save@v3
        if: steps.cache-cmake-restore.outputs.cache-hit != 'true'
        with:
          path: build
          key: ${{ steps.cache-cmake-restore.outputs.cache-primary-key }}
      - name: Build
        run: cmake --build build -j $env:NUMBER_OF_PROCESSORS
      - name: Pack 7z
        run: |
          .\.ci\scripts\windows\upload.ps1
          cd artifacts
          echo "${{ toJSON(inputs) }}" >> BuildConfig.json
          git diff > AppliedPatches.diff
          7z a -m0=lzma2 -mx=9 -ms=on ..\yuzu-windows.7z *
      - name: Upload 7z
        uses: actions/upload-artifact@v3
        with:
          name: yuzu-windows.7z
          path: yuzu-windows.7z
      - name: Create release
        if: github.ref == 'refs/heads/main'
        uses: ncipollo/release-action@v1
        with:
          artifacts: "yuzu-windows.7z"
          name: "${{ env.time }}"
          body: "${{ env.body }}"
          tag: "${{ env.BUILD_TAG }}"
          allowUpdates: true
          artifactErrorsFailBuild: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
